To initialize your Raspberry Pi 3 Model B using a push button, you can follow the steps below:

Connect the push button to your Raspberry Pi 3 Model B. You can do this by connecting one end of the button to the 3.3V pin and the other end to a GPIO pin (for example, GPIO 17).

Boot up your Raspberry Pi and open the terminal.

Install the required Python libraries by running the following commands:

$ sudo apt-get update
$ sudo apt-get install python-dev python-rpi.gpio

Create a Python script to detect the button press. Open the terminal and type the following command to create a new Python script:

$ nano button.py

In the Nano text editor, type the following code:

import RPi.GPIO as GPIO
import time
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)
while True:
    input_state = GPIO.input(17)
    if input_state == False:
        print('Button Pressed')
        time.sleep(0.2)
        
This code sets up the GPIO pin as an input with a pull-up resistor, and continuously checks for the state of the button. When the button is pressed, the script prints a message to the console.

Save the script by pressing Ctrl+X, then Y, and then Enter.

Run the script by typing the following command:

$ python button.py

Press the button and check if the script detects the button press.

You can use this script as a starting point to perform any action when the button is pressed, such as shutting down the Raspberry Pi, controlling an LED, or running a program.

===================================================================================================

To boot your Raspberry Pi only when a button is pressed, you need to modify the boot configuration file and add a script that waits for the button press before booting up the Raspberry Pi. Here are the steps to do this:

Connect the push button to your Raspberry Pi as described in the previous answer.

Boot up your Raspberry Pi and open the terminal.

Edit the boot configuration file by running the following command:

$ sudo nano /boot/config.txt

Add the following line at the end of the file:

$ dtoverlay=gpio-shutdown,gpio_pin=17,active_low=1,gpio_pull=up

This line configures the GPIO pin 17 as the shutdown pin, which will be used to detect the button press. The active_low=1 option sets the pin to active low, meaning that the pin will be pulled high by the internal resistor until the button is pressed and the pin is pulled low. The gpio_pull=up option enables the internal pull-up resistor.

Save the file by pressing Ctrl+X, then Y, and then Enter.

Create a script that waits for the button press. Open the terminal and type the following command to create a new script:

$ nano wait_for_button.py

In the Nano text editor, type the following code:

import RPi.GPIO as GPIO
import subprocess
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.wait_for_edge(17, GPIO.FALLING)
subprocess.call(['shutdown', '-h', 'now'], shell=False)

This code sets up the GPIO pin as an input with a pull-up resistor, waits for the button press by blocking until the GPIO pin is pulled low, and then shuts down the Raspberry Pi.

Save the script by pressing Ctrl+X, then Y, and then Enter.

Make the script executable by running the following command:

$ chmod +x wait_for_button.py

Edit the rc.local file to run the script at startup. Run the following command:

$ sudo nano /etc/rc.local

Add the following line before the exit 0 line:

$ /home/pi/wait_for_button.py &

This line runs the wait_for_button.py script in the background at startup.

Save the file by pressing Ctrl+X, then Y, and then Enter.

Reboot your Raspberry Pi by running the following command:

$ sudo reboot

Now when you connected the power spply to your raspberry Pi, it will wait for the button press before booting up. Press the button to boot up the Raspberry Pi
When you want to shut down the Raspberry Pi, press and hold the button for a few seconds util the raspbery shuts down.
